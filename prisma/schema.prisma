// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// Define database connection via the `DATABASE_URL` env var
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// datasource db {
//   provider = "sqlite"
//   url      = env("DATABASE_URL")
// }

// Define custom output path for generated Prisma Client
generator client {
  provider = "prisma-client-js"
  output   = "/app/generated/prisma-client"
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Core App Models
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  image         String?
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts   Account[]
  households HouseholdMember[]
  lists      ShoppingList[] // Lists created by the user
  recipes    Recipe[]

  @@map("users")
}

model Household {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  members HouseholdMember[]
  lists   ShoppingList[]
  recipes Recipe[]

  @@map("households")
}

model HouseholdMember {
  id                  String   @id @default(cuid())
  userId              String
  householdId         String
  role                String   @default("member") // "admin", "member"
  dietaryRestrictions String?
  allergies           String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // Relations
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  household Household @relation(fields: [householdId], references: [id], onDelete: Cascade)

  @@unique([userId, householdId])
  @@map("household_members")
}

model ShoppingList {
  id          String   @id @default(cuid())
  name        String
  isCompleted Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String // Owner of the list
  householdId String?

  // Relations
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     ShoppingItem[]
  household Household?     @relation(fields: [householdId], references: [id])

  @@unique([name, userId, householdId])
  @@map("shopping_lists")
}

model ShoppingItem {
  id          String   @id @default(cuid())
  name        String
  quantity    Int      @default(1)
  unit        String   @default("pcs")
  isCompleted Boolean  @default(false)
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  listId      String

  // Relations
  list ShoppingList @relation(fields: [listId], references: [id], onDelete: Cascade)

  @@map("shopping_items")
}

model Recipe {
  id           String   @id @default(cuid())
  name         String
  description  String?
  instructions String
  cookingTime  Int? // in minutes
  servings     Int      @default(4)
  image        String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  userId       String
  householdId  String?

  // Relations
  user        User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  household   Household?         @relation(fields: [householdId], references: [id], onDelete: SetNull)
  ingredients RecipeIngredient[]

  @@map("recipes")
}

model RecipeIngredient {
  id       String @id @default(cuid())
  name     String
  quantity String
  unit     String
  recipeId String

  // Relations
  recipe Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@map("recipe_ingredients")
}
