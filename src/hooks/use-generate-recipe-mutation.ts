import { useMutation } from "@tanstack/react-query";
import { toast } from "sonner";
import { AiIngredient, CreateRecipeForm } from "@/types";

interface GeneratedRecipe {
  name: string;
  description?: string;
  instructions: string | string[];
  cookingTime?: number;
  servings: number;
  image?: string;
  ingredients: AiIngredient[];
}

async function generateRecipe(prompt: string): Promise<CreateRecipeForm> {
  const response = await fetch("/api/ai/generate-recipe", {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify({ prompt }),
  });

  if (!response.ok) {
    const errorData = await response
      .json()
      .catch(() => ({ message: "Failed to generate recipe" }));
    throw new Error(errorData.message || "Failed to generate recipe");
  }

  const data: GeneratedRecipe = await response.json();

  const transformedData: CreateRecipeForm = {
    ...data,
    instructions: Array.isArray(data.instructions)
      ? data.instructions.join("\n")
      : data.instructions,
    ingredients: data.ingredients.map((ingredient) => ({
      ...ingredient,
      quantity: String(ingredient.quantity),
    })),
  };

  return transformedData;
}

export function useGenerateRecipeMutation() {
  return useMutation<CreateRecipeForm, Error, string>({
    mutationFn: generateRecipe,
    onSuccess: () => {
      toast.success("Recipe generated by AI âœ¨");
    },
    onError: (error) => {
      toast.error(error.message || "An unexpected error occurred.");
    },
  });
}
